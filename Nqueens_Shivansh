#include<iostream>
#include<vector>
#include<string>

using namespace std;

bool isSafe(int row, int col,vector<string> board, int n){
    int duprow = row;
    int dupcol = col;

    while(row >= 0 && col>=0){
        if (board[row][col] == 'Q'){
            return false;
        }
        row--;
        col--;
    }
    row = duprow;
    col = dupcol;
    while(row < n && col >= 0){
        if (board[row][col] == 'Q'){
            return false;
        }
        row++;
        col--;
    }
    row = duprow;
    col = dupcol;
    while (col >= 0){
        if (board[row][col] == 'Q'){
            return false;
        }
        col--;
    }
    return true;
}

void solve(int col, vector<string> board, vector<vector<string>>& answer, int n){
    if (col == n){
        answer.push_back(board);
        return;
    }
    for (int row = 0; row < n; row++){
        if (isSafe(row,col,board,n)){
            board[row][col] = 'Q';
            solve(col+1,board, answer, n);
            board[row][col] = '.';
        }
    }
}

vector<vector<string>> Nqueens(int n){
    vector<vector<string>> answer;
    vector<string> board(n);
    string s(n,'.');
    for (int i = 0; i < n; i++){
        board[i] = s;
    }
    solve(0,board,answer,n);
    return answer;
}

void printQ(vector<vector<string>> ans){
    for (auto b : ans){
        for (auto r : b){
            for (auto s : r){
                cout << s << "|";
            }
            cout << endl;
        }
        cout << endl << endl << endl;
    }
}

int main(){
    vector<vector<string>> ans;
    for (int n = 4; n < 16; n++){
        ans = Nqueens(n);
        cout << n << "   " << ans.size() << endl;
    }
    return 0;
}
